@using DrinkDiscovery_Revised.Models;
@model DrinkDiscovery_Revised.Models.Order

@{
    ViewData["Title"] = "Confirm Address";
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow-lg">
                <div class="card-header text-center bg-primary text-white">
                    <h3>Confirm Address Information</h3>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("ConfirmAddress", "Payment", FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-horizontal" }))
                    {
                        @Html.AntiForgeryToken() 

                        @* Hidden field for OrderId *@
                        @Html.HiddenFor(item => item.OrderId)

                        <div class="form-group row mb-3">
                            <label for="Email" class="col-sm-4 col-form-label"><b>Email:</b></label>
                            <div class="col-sm-8">
                                @Html.TextBoxFor(item => item.Email, new { @class = "form-control", placeholder = "Enter your email" })
                            </div>
                        </div>

                        <div class="form-group row mb-3">
                            <label for="OrderDeliveryAddress" class="col-sm-4 col-form-label"><b>Delivery Address:</b></label>
                            <div class="col-sm-8">
                                @Html.TextBoxFor(item => item.OrderDeliveryAddress, new { @class = "form-control", placeholder = "Enter delivery address" })
                            </div>
                        </div>

                        <div class="form-group row mb-3">
                            <label for="PhoneNumber" class="col-sm-4 col-form-label"><b>Phone Number:</b></label>
                            <div class="col-sm-8">
                                @Html.TextBoxFor(item => item.PhoneNumber, new { @class = "form-control", placeholder = "Enter phone number" })
                            </div>
                        </div>

                        <div class="form-group row mb-3">
                            <label for="OrderPaymentMethod" class="col-sm-4 col-form-label"><b>Payment Method:</b></label>
                            <div class="col-sm-8">
                                @Html.DropDownListFor(i => i.OrderPaymentMethod, new SelectList(new List<SelectListItem>
                            {
                            new SelectListItem { Text = "Kredi Kartı", Value = "Kredi Kartı" },
                            new SelectListItem { Text = "Nakit", Value = "Nakit" },
                            new SelectListItem { Text = "Havale", Value = "Havale" }
                            }, "Value", "Text"), new { @class = "form-control" })
                            </div>
                        </div>

                        <div class="form-group row mb-3">
                            <label for="OrderPaymentStatus" class="col-sm-4 col-form-label"><b>Payment Status:</b></label>
                            <div class="col-sm-8">
                                @Html.TextBoxFor(item => item.OrderPaymentStatus, new { @class = "form-control", @readonly = "readonly", @value = "pending" })
                            </div>
                        </div>

                        <div class="form-group row mb-3">
                            <label for="OrderStatus" class="col-sm-4 col-form-label"><b>Order Status:</b></label>
                            <div class="col-sm-8">
                                @Html.TextBoxFor(item => item.OrderStatus, new { @class = "form-control", @readonly = "readonly", @value = "preparing" })
                            </div>
                        </div>

                        <div class="form-group row mb-3">
                            <div class="col-sm-12 text-center">
                                <button type="submit" class="btn btn-primary btn-lg" style="width: 100%;">Confirm Address</button>
                            </div>
                        </div>

                        <div class="form-group row mb-3">
                            <div class="col-sm-12 text-center">
                                <button type="submit" id="btnsiparissil" class="btn btn-alert btn-lg" style="width: 100%;">Siparişi sil ve anasayfaya dön</button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="~/lib/jquery/jquery.min.js"></script>

@section Scripts {
    <script>
        $(document).ready(function () {
            $("#btnsiparissil").click(function (e) {
                e.preventDefault(); // Prevent the form from submitting immediately

                // Show confirmation prompt
                var confirmDelete = window.confirm("Gerçekten siparişi silmek istiyor musunuz?");
                if (confirmDelete) {
                    // If the user confirms, proceed with the deletion
                    $.ajax({
                        url: "/Payment/DeleteIncompleteOrder",
                        type: "POST",
                        data: { orderId: @Model.OrderId },
                        headers: {
                            // Include the anti-forgery token in the request header
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function (response) {
                            if (response.success) {
                                // Show a success message and redirect after a delay
                                alert("Sipariş başarıyla silindi!");
                                setTimeout(function () {
                                    window.location.href = "/";
                                }, 2000);
                            } else {
                                alert("Sipariş silinemedi. Durum: " + response.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error("Error details: ", status, error);
                            alert("Bir hata oluştu. Lütfen tekrar deneyin.");
                        }
                    });
                } else {
                    // If the user cancels, continue with the process without deleting
                    alert("Sipariş silme işlemi iptal edildi.");
                }
            });

            
        });
    </script>
}
